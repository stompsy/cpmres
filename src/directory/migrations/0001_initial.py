# Generated by Django 5.0.6 on 2024-06-20 03:20

import django.db.models.deletion
import django.db.models.functions.text
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(help_text='Enter a description of the Agency (e.g. Mission, Services, etc.)', max_length=1500, unique=True)),
                ('address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zipcode', models.CharField(max_length=20)),
                ('phone_number', models.CharField(max_length=20)),
                ('fax_number', models.CharField(max_length=20)),
                ('website', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AgencyTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a tag for an Agency (e.g. Durable Medical Equipment, Dental, Dialysis, Naturopathic Health, SUD Treatment, Primary Care, Benefits Coordination, etc.)', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='AgencyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter an Agency type (e.g. General Hospital, Health Clinic, Assisted Living, Diagnostic Center, Treatment Center, Pharmacy, etc.)', max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('nick_name', models.CharField(blank=True, max_length=100, null=True)),
                ('bio', models.TextField(help_text='Enter a brief description or bio for the Provider (e.g. Mission, services provided, etc.)', max_length=1500, unique=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('email', models.EmailField(max_length=100)),
                ('work_phone', models.CharField(max_length=20)),
                ('cell_phone', models.CharField(max_length=20)),
                ('can_text', models.BooleanField()),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='ProviderTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a tag for a Provider (e.g. Street Medicine, Dermatology, Psychiatry, Hospice Care, Family Practice, Wound Care, Investigator, etc.)', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProviderType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a Provider type (e.g. Community Paramedic, Medical Doctor, Physician Assistant, Registered Nurse, Pharmacist, etc.)', max_length=200, unique=True)),
            ],
        ),
        migrations.AddConstraint(
            model_name='agencytag',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='agencytag_name_case_insensitive_unique', violation_error_message='Agency tag already exists (case insensitive match)'),
        ),
        migrations.AddField(
            model_name='agency',
            name='tag',
            field=models.ManyToManyField(help_text='Select tags for this Agency', related_name='agencies', to='directory.agencytag'),
        ),
        migrations.AddConstraint(
            model_name='agencytype',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='agencytype_name_case_insensitive_unique', violation_error_message='Agency type already exists (case insensitive match)'),
        ),
        migrations.AddField(
            model_name='agency',
            name='type',
            field=models.ManyToManyField(help_text='Select types for this Agency', related_name='agencies', to='directory.agencytype'),
        ),
        migrations.AddField(
            model_name='provider',
            name='agency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='providers', to='directory.agency'),
        ),
        migrations.AddConstraint(
            model_name='providertag',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='providertag_name_case_insensitive_unique', violation_error_message='Provider tag already exists (case insensitive match)'),
        ),
        migrations.AddField(
            model_name='provider',
            name='tag',
            field=models.ManyToManyField(help_text='Select tags for this Provider', related_name='providers', to='directory.providertag'),
        ),
        migrations.AddConstraint(
            model_name='providertype',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='providertype_name_case_insensitive_unique', violation_error_message='Provider type already exists (case insensitive match)'),
        ),
        migrations.AddField(
            model_name='provider',
            name='type',
            field=models.ManyToManyField(help_text='Select types (title) for this Provider', related_name='providers', to='directory.providertype'),
        ),
        migrations.AddConstraint(
            model_name='agency',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='agency_name_case_insensitive_unique', violation_error_message='Agency already exists (case insensitive match)'),
        ),
        migrations.AddConstraint(
            model_name='provider',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('email'), name='provider_name_case_insensitive_unique', violation_error_message='Provider already exists (case insensitive match)'),
        ),
    ]
